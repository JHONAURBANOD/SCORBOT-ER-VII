// Generated by gencpp from file robot_pkg/robotPosition.msg
// DO NOT EDIT!


#ifndef ROBOT_PKG_MESSAGE_ROBOTPOSITION_H
#define ROBOT_PKG_MESSAGE_ROBOTPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_pkg/robotJointAction.h>

namespace robot_pkg
{
template <class ContainerAllocator>
struct robotPosition_
{
  typedef robotPosition_<ContainerAllocator> Type;

  robotPosition_()
    : robotAction()  {
    }
  robotPosition_(const ContainerAllocator& _alloc)
    : robotAction()  {
  (void)_alloc;
      robotAction.assign( ::robot_pkg::robotJointAction_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::robot_pkg::robotJointAction_<ContainerAllocator> , 6>  _robotAction_type;
  _robotAction_type robotAction;





  typedef boost::shared_ptr< ::robot_pkg::robotPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_pkg::robotPosition_<ContainerAllocator> const> ConstPtr;

}; // struct robotPosition_

typedef ::robot_pkg::robotPosition_<std::allocator<void> > robotPosition;

typedef boost::shared_ptr< ::robot_pkg::robotPosition > robotPositionPtr;
typedef boost::shared_ptr< ::robot_pkg::robotPosition const> robotPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_pkg::robotPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_pkg::robotPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robot_pkg': ['/home/salaceri/robotica_ws/src/robot/robot_pkg/msg', '/home/salaceri/robotica_ws/src/robot/robot_pkg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_pkg::robotPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_pkg::robotPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_pkg::robotPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_pkg::robotPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_pkg::robotPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_pkg::robotPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_pkg::robotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c1462b9022dcefd95a1a401dee2a956";
  }

  static const char* value(const ::robot_pkg::robotPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c1462b9022dcefdULL;
  static const uint64_t static_value2 = 0x95a1a401dee2a956ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_pkg::robotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_pkg/robotPosition";
  }

  static const char* value(const ::robot_pkg::robotPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_pkg::robotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotJointAction[6]           robotAction          # array of data to send each motor\n\
\n\
================================================================================\n\
MSG: robot_pkg/robotJointAction\n\
\n\
Header           header\n\
int8           motor\n\
int8           action\n\
int16           position\n\
int16           velocity\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::robot_pkg::robotPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_pkg::robotPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotAction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_pkg::robotPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_pkg::robotPosition_<ContainerAllocator>& v)
  {
    s << indent << "robotAction[]" << std::endl;
    for (size_t i = 0; i < v.robotAction.size(); ++i)
    {
      s << indent << "  robotAction[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_pkg::robotJointAction_<ContainerAllocator> >::stream(s, indent + "    ", v.robotAction[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PKG_MESSAGE_ROBOTPOSITION_H
